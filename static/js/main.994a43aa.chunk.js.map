{"version":3,"sources":["store/actions.ts","store/index.ts","api/todos.ts","store/selectors.ts","api/users.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["LOAD_TODOS","LOAD_USER","USER_ERROR","loadTodoAction","payload","type","loadUserAction","userErrorAction","initialState","todos","user","userError","store","createStore","state","action","API_URL","getTodos","a","fetch","response","json","deleteTodos","todoId","method","getTodosSelector","getUserSelector","getStatusOfUserError","getUser","userId","TodoList","dispatch","useDispatch","useState","currentInput","setCurrentInput","currentSorting","setCurrentSorting","useSelector","lowerCaseCurrentInput","toLowerCase","filteredTodos","filter","value","title","includes","completed","useEffect","loadTodosFromServer","todosFromServer","handleClick","dataUser","handleDeleteTodo","className","onChange","event","target","map","todo","classNames","htmlFor","readOnly","onClick","id","CurrentUser","name","email","phone","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.994a43aa.chunk.js","sourcesContent":["import { Todo, User } from '../react-app-env';\n\nexport const LOAD_TODOS = 'LOAD_TODOS';\nexport const LOAD_USER = 'LOAD_USER';\nexport const USER_ERROR = 'SEARCH_TODOS';\n\nexport const loadTodoAction = (payload: Todo[]) => ({\n  type: LOAD_TODOS,\n  payload,\n});\n\nexport const loadUserAction = (payload: User | null) => ({\n  type: LOAD_USER,\n  payload,\n});\n\nexport const userErrorAction = (payload: boolean) => ({\n  type: USER_ERROR,\n  payload,\n});\n","import { createStore, AnyAction } from 'redux';\nimport { State } from '../react-app-env';\nimport { LOAD_TODOS, LOAD_USER, USER_ERROR } from './actions';\n\n// Selectors - a function receiving Redux state and returning some data from it\n// export const isLoading = (state: RootState) => state.loading;\n// export const getMessage = (state: RootState) => state.message;\n\n// Initial state\n\nconst initialState: State = {\n  todos: [],\n  user: null,\n  userError: false,\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case LOAD_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n    case LOAD_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n    case USER_ERROR:\n      return {\n        ...state,\n        userError: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n);\n\nexport default store;\n","import { Todo } from '../react-app-env';\n\nconst API_URL = 'https://mate.academy/students-api/todos';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const response = await fetch(API_URL);\n\n  return response.json();\n}\n\nexport async function deleteTodos(todoId: number): Promise<Todo[]> {\n  await fetch(`${API_URL}/${todoId}`, {\n    method: 'DELETE',\n  });\n\n  return getTodos();\n}\n","import { State } from '../react-app-env';\n\nexport const getTodosSelector = (state: State) => state.todos;\nexport const getUserSelector = (state: State) => state.user;\nexport const getStatusOfUserError = (state: State) => state.userError;\n","import { User } from '../react-app-env';\n\nconst API_URL = 'https://mate.academy/students-api/users/';\n\nexport async function getUser(userId: number): Promise<User> {\n  const response = await fetch(`${API_URL}${userId}`);\n\n  return response.json();\n}\n","// import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteTodos, getTodos } from '../../api/todos';\nimport { loadTodoAction, loadUserAction, userErrorAction } from '../../store/actions';\nimport { getTodosSelector } from '../../store/selectors';\nimport { getUser } from '../../api/users';\n\nexport const TodoList = () => {\n  const dispatch = useDispatch();\n\n  const [currentInput, setCurrentInput] = useState<string>('');\n  const [currentSorting, setCurrentSorting] = useState<string>('all');\n\n  const todos = useSelector(getTodosSelector);\n\n  const lowerCaseCurrentInput = currentInput.toLowerCase();\n\n  let filteredTodos = todos.filter((value) => {\n    if (value.title.toLowerCase().includes(lowerCaseCurrentInput)) {\n      return true;\n    }\n\n    return false;\n  });\n\n  switch (currentSorting) {\n    case 'active':\n      filteredTodos = filteredTodos.filter((value) => (!value.completed));\n      break;\n    case 'completed':\n      filteredTodos = filteredTodos.filter((value) => (value.completed));\n      break;\n    default:\n      break;\n  }\n\n  useEffect(() => {\n    const loadTodosFromServer = async () => {\n      const todosFromServer = await getTodos();\n\n      dispatch(loadTodoAction(todosFromServer));\n    };\n\n    loadTodosFromServer();\n  }, []);\n\n  const handleClick = async (userId: number) => {\n    try {\n      const dataUser = await getUser(userId);\n\n      dispatch(loadUserAction(dataUser));\n      dispatch(userErrorAction(false));\n    } catch (e) {\n      dispatch(userErrorAction(true));\n    }\n  };\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCurrentInput(event.target.value);\n  };\n\n  const changeStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setCurrentSorting(event.target.value);\n  };\n\n  const handleDeleteTodo = async (todoId: number) => {\n    const todosFromServer = await deleteTodos(todoId);\n\n    dispatch(loadTodoAction(todosFromServer));\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <div className=\"TodoList__all-inputs\">\n        <input\n          className=\"input is-info\"\n          type=\"text\"\n          value={currentInput}\n          onChange={handleInput}\n        />\n        <div className=\"select is-link\">\n          <select\n            value={currentSorting}\n            onChange={changeStatus}\n          >\n            <option value=\"\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed </option>\n          </select>\n        </div>\n      </div>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredTodos.map((todo) => (\n            <li\n              key={todo.id}\n              className={classNames(\n                'TodoList__item',\n                { 'TodoList__item--unchecked': !todo.completed },\n                { 'TodoList__item--checked': todo.completed },\n              )}\n            >\n              <label htmlFor=\"checkTodo\">\n                <input type=\"checkbox\" readOnly />\n                <p>{todo.title}</p>\n              </label>\n              <div>\n                <button\n                  className=\"TodoList__user-button TodoList__user-button--selected button\"\n                  type=\"button\"\n                  onClick={() => handleClick(todo.userId)}\n                >\n                  { `User #${todo.userId}` }\n                </button>\n                <button\n                  className=\"TodoList__user-button TodoList__user-button--selected button\"\n                  type=\"button\"\n                  onClick={() => handleDeleteTodo(todo.id)}\n                >\n                  Delete\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import './CurrentUser.scss';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getStatusOfUserError, getUserSelector } from '../../store/selectors';\nimport { loadUserAction } from '../../store/actions';\n\nexport const CurrentUser = () => {\n  const dispatch = useDispatch();\n  const user = useSelector(getUserSelector);\n  const isUserHasError = useSelector(getStatusOfUserError);\n\n  if (isUserHasError) {\n    return (\n      <p>No user was founded</p>\n    );\n  }\n\n  if (!user) {\n    return (\n      <p>No user selected</p>\n    );\n  }\n\n  const clearUser = () => {\n    dispatch(loadUserAction(null));\n  };\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user?.id}`}</span></h2>\n      <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n      <p className=\"CurrentUser__email\">{user?.email}</p>\n      <p className=\"CurrentUser__phone\">{user?.phone}</p>\n      <button\n        type=\"button\"\n        className=\"CurrentUser__clear button\"\n        onClick={clearUser}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import './App.scss';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          <CurrentUser />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}